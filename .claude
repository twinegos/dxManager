# dxManager 프로젝트 리팩토링 계획

## 프로젝트 개요
- **이름**: dxManager
- **주요 기능**: 스케줄 관리
- **UI 특징**:
  - 사용자/팀원 트리뷰
  - 프로젝트 리스트
  - 드래그앤드롭으로 태스크 스케줄링
  - 태스크 더블클릭 시 프리뷰 실행
  - 우클릭 컨텍스트 메뉴

## 현재 프로젝트 상태

### 구조
- **메인 파일**: dxManager.py (9,995라인의 대용량 파일)
- **UI 모듈**: /UI 디렉토리 (Qt Designer 생성 파일들)
- **클래스 모듈**: /class 디렉토리 (비즈니스 로직)
- **데이터**: JSON 기반 스케줄 데이터 저장

### 기술 스택
- PySide2 (Qt GUI)
- MongoDB (데이터베이스)
- pandas, openpyxl (데이터 처리)
- TACTIC API 연동

## FileManager 클래스 분리 완료 (2025-09-23)

### 이전 시도와 문제점 (2025-09-19)

#### 발견된 버그 (이전 시도)
- **문제**: 팀원 체크박스 토글 시 스케쥴 태스크가 불규칙하게 나타나거나 사라지는 현상
- **발견 시점**: FileManager 클래스 위임 메서드 제거 후 외부 테스트
- **해결**: FileManager 클래스 분리 자체를 완전 원복

### FileManager 클래스 재분리 성공 (2025-09-23)

#### 성공한 접근 방식
1. **단계적 분리**: 메서드 그룹별로 나누어 분리 진행
2. **외부 테스트**: 각 단계마다 팀원 체크박스 토글 기능 확인
3. **위임 메서드 제거**: 분리 완료 후 직접 호출 방식으로 변경

#### 분리된 FileManager 메서드들 (7개)
1. **`get_latest_file(path)`** - 최신 파일 가져오기 + 프리뷰 실행
2. **`backup_schedule(save_data, user, backup_dir, backup_name)`** - 스케줄 백업
3. **`cleanup_old_backups(backup_dir, user, max_backups=10)`** - 백업 파일 정리
4. **`import_Json(path, name)`** - JSON 파일 읽기
5. **`import_Json_Thread(path, name)`** - 스레드용 JSON 읽기
6. **`export_Json(path, name, data)`** - JSON 파일 저장
7. **`export_Json_Thread(path, name, data)`** - 스레드용 JSON 저장

#### 구현 세부사항
- **파일 위치**: `/class/file_manager.py` (258라인)
- **import 추가**: `from file_manager import FileManager`
- **인스턴스 초기화**: `self.file_manager = FileManager(self)`
- **메서드 호출 변경**: 50개 호출을 `self.file_manager.method_name()` 형태로 변경

#### 원래 메서드 명명 규칙 유지
- `import_Json` (대문자 J)
- `export_Json` (대문자 J)
- `import_Json_Thread` (대문자 J, T)
- `export_Json_Thread` (대문자 J, T)

### 현재 상태 (2025-09-23)
#### 분리 완료된 클래스들 (9개)
1. **TacticAPIClient** (2025-09-08): TACTIC API 통신
2. **DataManager** (2025-09-09): JSON 데이터 처리
3. **UIController** (2025-09-09): UI 관리 기본 구조
4. **TeamManager** (2025-09-09): 팀 관리 (5개 메서드)
5. **EventManager** (2025-09-16): 이벤트 처리 (5개 메서드)
6. **SortManager** (2025-09-16): 정렬 기능 (10개 메서드)
7. **UILayoutManager** (2025-09-17): UI 레이아웃 (3개 메서드)
8. **ValidationManager** (2025-09-17): 데이터 검증 (4개 메서드)
9. **✅ FileManager** (2025-09-23): 파일 입출력 관리 (7개 메서드)

#### 라인수 현황
- **dxManager.py**: 7,012라인 (9라인 추가 감소 - UILayoutManager 위임 메서드 제거)
- **분리된 클래스 파일들**: 총 9개 파일
- **전체 모듈화 진행률**: 약 32% 완료

### ✅ 위임 메서드 제거 작업 완료 (2025-09-23)

#### 완료된 작업
1. **SortManager**: 위임 메서드 없음 - 이미 직접 호출 방식
2. **ValidationManager**: 위임 메서드 없음 - 이미 직접 호출 방식
3. **TeamManager**: 위임 메서드 없음 - 이미 직접 호출 방식
4. **EventManager**: 위임 메서드 없음 - 이미 직접 호출 방식
5. **✅ UILayoutManager**: 3개 위임 메서드 제거 완료
   - `update_splitter_size()` 제거
   - `rescaleListView()` 제거
   - `reset_splitter_size()` 제거

### 다음 분리 계획 수립 (2025-09-23)

#### 추가 분리 후보 클래스들 분석 완료

1. **UIManager** (우선 추천 - 12개 메서드)
   - ListView 관리 전담: `addListView`, `removeListView`, `makeListView` 등
   - 낮은 위험성: UI 관련 메서드들로 데이터 로직과 분리도 높음
   - 메서드: `changeListViewUI_notTracking`, `changeListViewUI_`, `addListView`, `removeListView`, `makeListView`, `getListViewItem_inJson`, `getListViewItem`, `getListView_selectedItem`, `getCurrentListViewDate`, `setListviewLineEdit`, `set_listView_view`, `setUp_listViewUI`

2. **ProjectManager** (중간 위험성 - 8개 메서드)
   - 프로젝트 선택, 필터링, 조회 관리
   - 메서드: `process_sel_project`, `get_selected_projects`, `get_projs_thisWeek`, `getProjs_Mem_selAll`, `getProjs_Mem`, `get_projects_3Weeks`, `sel_assigned_proj`, `findProj`

3. **ScheduleManager** (높은 위험성 - 9개 메서드)
   - 스케줄 핵심 로직 (민감한 `reloadShotList` 포함)
   - 메서드: `makeMirrorSchedule`, `delete_schedule`, `find_schedule`, `add_schedule`, `set_schedule_StartEnd`, `move_sideways`, `refereshListViews`, `scheduleExportJson`, `reloadShotList`

#### 분리 작업 우선순위
1. **UIController 확장** → 2. **ProjectManager** → 3. **ScheduleManager**

### 점진적 분리 방법론 (Progressive Migration Methodology)

#### 안전한 클래스 분리 프로세스
1. **임시 클래스 생성**: dxManager.py 내부에 `TempListViewManager` 클래스 생성
2. **단계별 메서드 이동**: 한 번에 1개씩 메서드를 임시 클래스로 이동
3. **외부 테스트**: 각 메서드 이동 후 핵심 기능 테스트 (팀원 체크박스 토글 등)
4. **원본 메서드 제거**: 테스트 통과 후 원본 메서드 삭제
5. **최종 통합**: 모든 메서드 이동 완료 후 UIController로 통합
6. **임시 클래스 제거**: 통합 완료 후 임시 클래스 삭제

#### 적용 대상 메서드 (12개)
- `changeListViewUI_notTracking`
- `changeListViewUI_`
- `addListView`
- `removeListView`
- `makeListView`
- `getListViewItem_inJson`
- `getListViewItem`
- `getListView_selectedItem`
- `getCurrentListViewDate`
- `setListviewLineEdit`
- `set_listView_view`
- `setUp_listViewUI`

#### 이 방법론의 장점
1. **안전성**: 각 단계별 검증으로 버그 조기 발견
2. **되돌리기 가능**: 문제 발생 시 이전 단계로 쉽게 복원
3. **점진적 진행**: 큰 변경 없이 작은 단위로 진행
4. **재현 가능**: 다음 분리 작업에도 동일한 방법론 적용

## ListView 메서드 분리 추가 진행 (2025-09-23 계속)

### 점진적 분리 작업 완료 상황
#### ✅ 완료된 ListView 메서드 분리 (9개)
1. **setListviewLineEdit** - 슬라이더 홀수 값 표시
2. **getCurrentListViewDate** - ListView 날짜 정보 반환
3. **set_listView_view** - ListView 뷰 설정 및 필터링
4. **getListView_selectedItem** - 선택된 아이템 조회
5. **getListViewItem** - 모든 아이템 조회
6. **getListViewItem_inJson** - JSON 기반 아이템 조회
7. **makeListView** - ListView 위젯 생성
8. **✅ addListView** - ListView 추가 (복잡한 메서드)
9. **✅ setUp_listViewUI** - 초기 ListView UI 설정
10. **✅ changeListViewUI_notTracking** - 슬라이더 릴리즈 시 UI 변경

#### 슬라이더 태스크 사라짐 문제 해결 (2025-09-23)
**문제 증상**: 슬라이더 이동 시 리스트뷰에 보이던 태스크들이 사라지는 현상

**원인 분석 및 해결**:
1. **슬라이더 연결 문제**:
   - `listViewSlider.valueChanged.connect(self.setListviewLineEdit)` → `self.temp_listview_manager.setListviewLineEdit`
   - `listViewSlider.sliderReleased.connect(self.changeListViewUI_notTracking)` → `self.temp_listview_manager.changeListViewUI_notTracking`

2. **메서드 호출 체인 끊어짐**:
   - `refereshListViews` → `getCurrentListViewDate` 호출 경로 수정
   - `self.getCurrentListViewDate(direction)` → `self.temp_listview_manager.getCurrentListViewDate(direction)`

3. **set_listView_view 호출 경로 수정**:
   - `refereshListViews` 메서드 내 3곳에서 호출되는 `self.set_listView_view` → `self.temp_listview_manager.set_listView_view`
   - 4687라인, 4838라인, 6365라인 모두 수정 완료

4. **jsonData 전달 개선**:
   - 임시 클래스에서 `from dxManager import jsonData as global_jsonData` 사용
   - 글로벌 jsonData와 지역 jsonData 불일치 문제 해결

#### 현재 TempListViewManager 상태
```python
class TempListViewManager:
    def __init__(self, main_window):
        self.main_window = main_window
        print("TempListViewManager 초기화 완료")

    # 10개 메서드 모두 이동 완료
    def setListviewLineEdit(self, value): # 슬라이더 값 처리
    def getCurrentListViewDate(self, shiftDays): # 날짜 정보
    def set_listView_view(self, listView, model): # 뷰 설정
    def getListView_selectedItem(self, listView): # 선택 아이템
    def getListViewItem(self, listView): # 전체 아이템
    def getListViewItem_inJson(self, listView, members): # JSON 아이템
    def makeListView(self, label, listView, parentLayout, childLayout, scaleUI): # 위젯 생성
    def addListView(self, num, currentNum, scaleUI): # 리스트뷰 추가
    def setUp_listViewUI(self): # 초기 UI 설정
    def changeListViewUI_notTracking(self): # 슬라이더 UI 변경
```

#### 남은 작업 사항
- **디버깅 계속**: 사용자가 addListView 관련 추가 디버깅 예정
- **원본 메서드 제거**: 분리 완료 후 위임 메서드들 제거
- **UIController 통합**: 임시 클래스를 UIController로 최종 통합
- **다음 클래스 분리**: ProjectManager, ScheduleManager 계획 진행

### 교훈
1. **클래스 분리 != 항상 좋음**: 일부 기능은 원래 위치가 더 안정적
2. **데이터 로딩 로직 민감성**: 팀원 상태와 스케줄 데이터 연동은 매우 민감한 영역
3. **점진적 개선**: 단계적 접근으로 안정성 확보
4. **버그 추적**: 복잡한 버그는 단계적 원복을 통해 원인 범위 좁히기
5. **메서드 호출 체인 추적**: 클래스 분리 시 모든 호출 경로를 체계적으로 확인 필요

### 버그 원인 분석
**팀원 체크박스 토글 → 스케쥴 태스크 표시 문제**
- **이벤트 체인**: 체크박스 토글 → `handle_item_state_change` → `clickedAction_memberCheck` → `reloadShotList`
- **데이터 로딩 과정**: `reloadShotList` 메서드가 여러 FileManager 메서드들을 호출
- **타이밍/일관성 문제**: 클래스 분리 시 메서드 구현의 미묘한 차이가 데이터 로딩에 영향

**슬라이더 태스크 사라짐 문제**
- **호출 체인 끊어짐**: 메서드 분리 시 연결된 모든 호출 경로를 추적하지 못함
- **데이터 전달 불일치**: 글로벌 변수와 지역 변수 간 참조 차이
- **이벤트 연결 문제**: Qt 시그널/슬롯 연결이 분리된 클래스를 제대로 참조하지 못함

## ListView 메서드 추가 분리 작업 완료 (2025-09-24)

### ✅ 최종 완료 상황 (2025-09-24)
#### 완료된 TempListViewManager 메서드 분리 (12개)
1. **setListviewLineEdit** - 슬라이더 홀수 값 표시
2. **getCurrentListViewDate** - ListView 날짜 정보 반환
3. **set_listView_view** - ListView 뷰 설정 및 필터링
4. **getListView_selectedItem** - 선택된 아이템 조회
5. **getListViewItem** - 모든 아이템 조회
6. **getListViewItem_inJson** - JSON 기반 아이템 조회
7. **makeListView** - ListView 위젯 생성
8. **addListView** - ListView 추가 (복잡한 메서드)
9. **setUp_listViewUI** - 초기 ListView UI 설정
10. **changeListViewUI_notTracking** - 슬라이더 릴리즈 시 UI 변경
11. **✅ removeListView** - ListView 제거 (새로 추가)
12. **✅ changeListViewUI_** - LineEdit 텍스트 변경 시 UI 변경 (새로 추가)

#### 현재 TempListViewManager 클래스 상태 (131-653라인)
- **위치**: dxManager.py의 131-653라인
- **초기화**: `self.temp_listview_manager = TempListViewManager(self)` (624라인)
- **시그널 연결**: 슬라이더 이벤트가 temp_listview_manager로 연결됨
- **위임 메서드**: 17개 위치에서 temp_listview_manager 호출

### 🚨 발견된 문제점 (2025-09-24)

#### addListView 메서드 작동 불가 문제
**증상**: 슬라이더를 움직여도 ListView가 추가되지 않음

**시도한 해결책들**:
1. **scheduleListview import 경로 수정** - 실패
   - `sys.path.append('./class')` 추가 시도
   - 원위치 복구함

**추정 원인**:
1. **메서드 호출 체인 문제**: `changeListViewUI_notTracking` → `addListView` 호출 경로
2. **파라미터 전달 문제**: `self.main_window.activeJsonData` 값 이슈
3. **예외 발생**: addListView 내부 예외로 인한 중단
4. **Qt 이벤트 처리**: 분리된 클래스에서 Qt 위젯 생성/관리 문제

**현재 호출 구조**:
```python
# 슬라이더 릴리즈 →
self.temp_listview_manager.changeListViewUI_notTracking() →
# TempListViewManager 내부에서
self.addListView(number_add, current_Listview_Num, scaleUI, self.main_window.activeJsonData)
```

### 다음 작업 계획 (미완료)

#### 1단계: addListView 문제 해결 (긴급)
- **디버깅 방법**:
  1. addListView 메서드 내부에 print 문 추가하여 실행 여부 확인
  2. 파라미터 값들 출력해서 올바른 값 전달되는지 확인
  3. scheduleListview 모듈 import 성공 여부 확인
  4. try-except로 예외 잡아서 오류 메시지 확인

#### 2단계: TempListViewManager를 UIController로 통합
- 모든 메서드가 정상 작동 확인 후 진행
- `/class/ui_controller.py`로 메서드들 이동
- 임시 클래스 제거

#### 3단계: 다음 클래스 분리 계획
- **ProjectManager** 분리 (8개 메서드) - 중간 위험성
- **ScheduleManager** 분리 (9개 메서드) - 높은 위험성

### ✅ TempListViewManager 위임 메서드 직접 호출 변경 완료 (2025-09-24)

#### 완료된 작업
1. **위임 메서드 제거**: DxManager 클래스 내 11개 위임 메서드 완전 제거
   - `setListviewLineEdit`, `changeListViewUI_notTracking`, `changeListViewUI_`, `removeListView`, `setUp_listViewUI`, `makeListView`, `getListViewItem_inJson`, `getListViewItem`, `getListView_selectedItem`, `getCurrentListViewDate`, `set_listView_view` 제거
   - **예외**: `addListView`만 `activeJsonData = jsonData` 버그 수정 로직 유지 위해 위임 메서드 형태 보존

2. **직접 호출 변경**: 모든 호출을 `self.temp_listview_manager.메서드명()` 직접 호출로 변경
   - DxManager 클래스 내부: 17개 호출 위치 수정
   - 외부 클래스: sort_manager.py의 5개 호출 수정
   - 누락 발견 및 수정: getListViewItem 2개 추가 수정, 주석 처리된 호출 2개 수정

3. **버그 수정 로직 보존**:
   - addListView 메서드의 `activeJsonData = jsonData` 전달 로직 완벽 유지
   - 이전에 해결된 ListView 추가 기능 정상 작동 확인

#### 작업 방법론
- **점진적 수정**: 위임 메서드 제거 → 직접 호출 수정 → 외부 클래스 수정 → 누락 추가 수정
- **철저한 검증**: 전체 파일 대상 패턴 검색으로 모든 호출 확인
- **문법 검사**: Python 컴파일 테스트 통과

#### 외부 테스트 결과
- **팀원 체크박스 토글**: 정상 작동
- **슬라이더 ListView 조작**: 정상 작동
- **addListView 기능**: 정상 작동
- **모든 핵심 기능**: 이상 없음

### Git 상태
- **현재 브랜치**: main
- **라인수**: dxManager.py 약 7,020라인 (위임 메서드 제거로 감소)
- **마지막 작업**: TempListViewManager 위임 메서드 직접 호출 변경 완료
- **다음 작업**: TempListViewManager → UIController 통합 또는 다음 클래스 분리 진행

### 성공 요인 분석 (FileManager 재분리)
1. **단계적 접근**: 한번에 모든 메서드를 분리하지 않고 그룹별로 진행
2. **지속적 테스트**: 각 단계마다 핵심 기능(팀원 체크박스 토글) 확인
3. **메서드 구현 일치**: 원본과 100% 동일하게 구현하여 동작 보장
4. **직접 호출 방식**: 위임 메서드 제거 후 `self.file_manager.method_name()` 직접 호출
5. **호출 체인 추적**: 분리된 메서드를 호출하는 모든 경로를 체계적으로 수정