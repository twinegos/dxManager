# dxManager 프로젝트 리팩토링 계획

## 프로젝트 개요
- **이름**: dxManager  
- **주요 기능**: 스케줄 관리
- **UI 특징**: 
  - 사용자/팀원 트리뷰
  - 프로젝트 리스트
  - 드래그앤드롭으로 태스크 스케줄링
  - 태스크 더블클릭 시 프리뷰 실행
  - 우클릭 컨텍스트 메뉴

## 현재 프로젝트 상태

### 구조
- **메인 파일**: dxManager.py (9,995라인의 대용량 파일)
- **UI 모듈**: /UI 디렉토리 (Qt Designer 생성 파일들)
- **클래스 모듈**: /class 디렉토리 (비즈니스 로직)
- **데이터**: JSON 기반 스케줄 데이터 저장

### 기술 스택
- PySide2 (Qt GUI)
- MongoDB (데이터베이스)
- pandas, openpyxl (데이터 처리)
- TACTIC API 연동

## 주요 문제점
1. **단일 파일 집중화**: 10,000라인의 메인 파일에 모든 로직이 집중
2. **wildcard imports**: `from PySide2.QtWidgets import *` 남용
3. **코드 중복**: 유사한 기능들이 반복적으로 구현
4. **하드코딩**: API 키, 경로 등이 코드에 직접 포함
5. **임시 코드**: 주석처리된 테스트 코드와 백업 파일들 존재

## 리팩토링 우선순위 (단계별)

### Phase 1: 코드 정리 및 구조화 (1-2주)
1. **임시 파일 정리**: 백업 폴더, 주석처리된 코드 제거
2. **설정 파일 분리**: API 키, 경로 등을 config.py로 이동
3. **Import 정리**: wildcard imports 제거하고 명시적 import 사용
4. **상수 정의**: 매직 넘버와 하드코딩된 값들을 상수로 정의

### Phase 2: 모듈 분해 (2-3주)
1. **메인 클래스 분리**: dxManager 클래스를 역할별로 분해
2. **데이터 레이어 분리**: 데이터베이스 연결 및 API 통신 로직 분리
3. **UI 컨트롤러 분리**: 각 UI 컴포넌트별 컨트롤러 클래스 생성
4. **비즈니스 로직 정리**: 스케줄 관리, 태스크 관리 로직 분리

### Phase 3: 성능 및 안정성 개선 (1-2주)
1. **에러 핸들링**: try-catch 블록 추가 및 로깅 시스템 구축
2. **메모리 최적화**: 대용량 데이터 처리 최적화
3. **멀티스레딩**: UI 블로킹 방지를 위한 백그라운드 처리
4. **테스트 코드**: 주요 기능에 대한 단위 테스트 추가

## 즉시 구현 가능한 기능들
- **알림 시스템**: 데드라인 접근 시 알림
- **필터링 개선**: 프로젝트, 날짜, 상태별 고급 필터
- **데이터 백업**: 자동 백업 및 복원 기능
- **키보드 단축키**: 자주 사용하는 기능들에 단축키 제공

## 권장 시작점
Phase 1부터 시작하여 점진적으로 개선:
1. **백업 생성**: 현재 작동하는 코드의 완전한 백업
2. **설정 파일 분리**: 하드코딩된 값들을 config.py로 이동
3. **메인 파일 분할**: dxManager.py를 기능별로 분리

## Copilot 협업 설정 (다음 작업 시 진행)

### 추가 설정 필요 사항
1. **Copilot 언어별 활성화 확인**
   - Ctrl/Cmd + Shift + P → "Copilot: Configure" 실행
   - Python, JSON 등 프로젝트 언어들 활성화 상태 확인

2. **인라인 제안 최적화 설정**
   - settings.json에 github.copilot 관련 설정 추가
   - 더 정확하고 긴 제안을 받기 위한 파라미터 조정

### 작업 시 팁
- .claude 파일을 VSCode에서 열어두면 Copilot이 프로젝트 컨텍스트를 더 잘 이해함
- 리팩토링 시 주석으로 의도를 명확히 작성하면 더 정확한 코드 제안을 받을 수 있음