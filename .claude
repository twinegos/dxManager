# dxManager 프로젝트 리팩토링 계획

## 프로젝트 개요
- **이름**: dxManager  
- **주요 기능**: 스케줄 관리
- **UI 특징**: 
  - 사용자/팀원 트리뷰
  - 프로젝트 리스트
  - 드래그앤드롭으로 태스크 스케줄링
  - 태스크 더블클릭 시 프리뷰 실행
  - 우클릭 컨텍스트 메뉴

## 현재 프로젝트 상태

### 구조
- **메인 파일**: dxManager.py (9,995라인의 대용량 파일)
- **UI 모듈**: /UI 디렉토리 (Qt Designer 생성 파일들)
- **클래스 모듈**: /class 디렉토리 (비즈니스 로직)
- **데이터**: JSON 기반 스케줄 데이터 저장

### 기술 스택
- PySide2 (Qt GUI)
- MongoDB (데이터베이스)
- pandas, openpyxl (데이터 처리)
- TACTIC API 연동

## 주요 문제점
1. **단일 파일 집중화**: 10,000라인의 메인 파일에 모든 로직이 집중
2. **wildcard imports**: `from PySide2.QtWidgets import *` 남용
3. **코드 중복**: 유사한 기능들이 반복적으로 구현
4. **하드코딩**: API 키, 경로 등이 코드에 직접 포함
5. **임시 코드**: 주석처리된 테스트 코드와 백업 파일들 존재

## 리팩토링 우선순위 (단계별)

### Phase 1: 코드 정리 및 구조화 (1-2주)
1. **임시 파일 정리**: 백업 폴더, 주석처리된 코드 제거
2. **설정 파일 분리**: API 키, 경로 등을 config.py로 이동
3. **Import 정리**: wildcard imports 제거하고 명시적 import 사용
4. **상수 정의**: 매직 넘버와 하드코딩된 값들을 상수로 정의

### Phase 2: 모듈 분해 (2-3주)
1. **메인 클래스 분리**: dxManager 클래스를 역할별로 분해
2. **데이터 레이어 분리**: 데이터베이스 연결 및 API 통신 로직 분리
3. **UI 컨트롤러 분리**: 각 UI 컴포넌트별 컨트롤러 클래스 생성
4. **비즈니스 로직 정리**: 스케줄 관리, 태스크 관리 로직 분리

### Phase 3: 성능 및 안정성 개선 (1-2주)
1. **에러 핸들링**: try-catch 블록 추가 및 로깅 시스템 구축
2. **메모리 최적화**: 대용량 데이터 처리 최적화
3. **멀티스레딩**: UI 블로킹 방지를 위한 백그라운드 처리
4. **테스트 코드**: 주요 기능에 대한 단위 테스트 추가

## 즉시 구현 가능한 기능들
- **알림 시스템**: 데드라인 접근 시 알림
- **필터링 개선**: 프로젝트, 날짜, 상태별 고급 필터
- **데이터 백업**: 자동 백업 및 복원 기능
- **키보드 단축키**: 자주 사용하는 기능들에 단축키 제공

## 권장 시작점
Phase 1부터 시작하여 점진적으로 개선:
1. **백업 생성**: 현재 작동하는 코드의 완전한 백업
2. **설정 파일 분리**: 하드코딩된 값들을 config.py로 이동
3. **메인 파일 분할**: dxManager.py를 기능별로 분리

## Copilot 협업 설정 (다음 작업 시 진행)

### 1. VSCode 설정 (.vscode/settings.json 생성 필요)
```json
{
  "github.copilot.enable": {
    "python": true,
    "json": true,
    "plaintext": true,
    "markdown": true
  },
  "github.copilot.advanced": {
    "length": 500,
    "temperature": 0.1
  },
  "github.copilot.inlineSuggest.enable": true,
  "editor.inlineSuggest.enabled": true,
  "editor.suggestSelection": "first"
}
```

### 2. 확인 필요한 설정들
- **명령 팔레트**: Ctrl/Cmd + Shift + P → "Copilot: Configure"
- **인라인 채팅**: Ctrl/Cmd + Shift + P → "Inline Chat: Configure Inline Chat"
- **상태 확인**: VSCode 하단 상태바에서 Copilot 아이콘 클릭

### 3. dxManager 프로젝트 특화 설정
- **파일 연관성**: .py, .json, .md 파일에서 Copilot 활성화
- **컨텍스트 최적화**: 대용량 파일(dxManager.py) 작업 시 성능 고려
- **PySide2 지원**: Qt 관련 코드 제안 품질 향상

### 4. 작업 시 팁
- .claude 파일을 VSCode에서 열어두면 프로젝트 컨텍스트 제공
- 리팩토링 시 "# TODO: 이 함수를 모듈로 분리" 같은 명확한 주석 작성
- 함수/클래스명을 먼저 작성하고 Tab으로 구현부 자동완성 활용

## 외부 시스템 테스트 복사 작업

### 개요
개발한 코드를 네트워크상의 외부 시스템에서 테스트하기 위해 수정된 파일들을 복사하는 작업이 필요합니다.

### 복사할 파일 목록
다음 파일들은 수정 빈도가 높으므로 외부 테스트 시 항상 복사해야 합니다:

#### 1. 메인 파일
- `dxManager.py` (메인 애플리케이션 파일)

#### 2. class 폴더 전체
```
class/
├── DataTableView.py
├── Edit_mandays.py
├── dragDropListView.py
├── editMemberDialog.py
├── leadMainWindow.py
├── loadingProgress.py
├── loading_workData.py
├── makeMirror_thread.py
├── multiColorProgressBar.py
├── progressBar_Thread.py
├── proj_Manday.py
├── readOnlyDelegate.py
├── scheduleListview.py
├── status_projManday.py
├── status_teamManday.py
├── taskInfoDialog.py
├── updateUserInfo_Thread.py
```

#### 3. UI 폴더 (수정 시)
```
UI/
├── leadMainWindow_UI.py
├── leadMainWindow_UI (사본).py
├── daySchedule_UI.py
└── (기타 수정된 UI 파일들)
```

### 복사 명령어 템플릿
사용자가 "외부 테스트 복사해줘" 또는 유사한 요청을 할 때:

1. **전체 복사**: 모든 수정된 파일들을 한 번에 복사
2. **선택적 복사**: 특정 파일이나 폴더만 복사
3. **증분 복사**: 최근 수정된 파일들만 복사

### 자동화 스크립트 예시
```bash
# 메인 파일 및 class 폴더 복사
cp dxManager.py [외부시스템경로]/
cp -r class/ [외부시스템경로]/class/

# UI 파일 복사 (필요시)
cp UI/leadMainWindow_UI.py [외부시스템경로]/UI/
cp "UI/leadMainWindow_UI (사본).py" [외부시스템경로]/UI/
```

### 주의사항
- 외부 시스템 경로는 네트워크 연결 상태에 따라 달라질 수 있음
- 복사 전 파일 백업 권장
- 권한 문제 발생 시 sudo 사용 필요할 수 있음
- __pycache__ 폴더는 복사하지 않도록 주의 (외부 시스템에서 런타임 에러 발생 가능)

### 외부 시스템 경로
- **대상 경로**: `/opt/stdrepo/ANI/Artist/Moon_sungoh/dxManager_sh`

### 네트워크 연결 확인 방법
```bash
test -d /opt/stdrepo/ANI/Artist/Moon_sungoh/dxManager_sh && echo "경로 접근 가능" || echo "경로 접근 불가능"
```

### 권한 제한사항
- **가능**: 경로 존재 여부 확인 (`test -d` 명령어)
- **불가능**: 파일 읽기/쓰기/복사 (`ls`, `cp`, `mv` 등)
- **이유**: 보안 정책으로 인한 네트워크 경로 권한 제한

### 사용자 요청 시 대응 방법
사용자가 "외부 테스트 복사" 요청 시:
1. **연결 상태 확인**: `test -d` 명령어로 경로 접근 가능 여부 체크
2. **파일 목록 제공**: 최근 수정된 파일들 목록 제공
3. **파인더 복사 안내**: 사용자가 직접 파인더에서 복사하도록 안내
4. **주의사항 안내**: __pycache__ 폴더 제외, 덮어쓰기 방식 등

### 복사 작업 절차 (정확한 순서)
1. Assistant가 네트워크 연결 상태 확인
2. Assistant가 수정된 파일 목록 제공
3. **Assistant가 현재 프로젝트 파인더 창 먼저 열기** (`open /Users/sungoh.moon/Desktop/work/AI_code/dxManager`)
4. 사용자가 복사할 파일들 선택 후 Cmd+C (복사)
5. **사용자 복사 완료 시 Assistant가 외부 경로 파인더 창 열기** (`open /opt/stdrepo/ANI/Artist/Moon_sungoh/dxManager_sh`)
6. 사용자가 외부 경로에서 Cmd+V (붙여넣기/덮어쓰기)
7. 복사 완료 후 외부 시스템에서 테스트 진행

### 중요: 파인더 열기 순서
- **먼저**: 현재 프로젝트 파인더 (복사용)
- **나중에**: 외부 경로 파인더 (붙여넣기용)

## 중복 코드 리팩토링 상세 기록 (2025-09-03)

### 성공적으로 완료된 중복 코드 수정

#### 1. UI 숨김 로직 중복 제거 ✅
- **위치**: 완료된 프로젝트 UI 숨김 처리
- **문제**: 12라인의 동일한 UI 숨김 코드가 2곳에서 반복
- **해결**: `hide_completed_project_ui()` 통합 메소드 생성 (dxManager.py:2302)
- **효과**: 12라인 → 1라인 호출로 단축 (92% 코드 감소)

#### 2. JSON 파일 로딩 로직 개선 ✅
- **위치**: 팀 정보 JSON 파일 읽기
- **문제**: 중복된 파일 로딩 로직, 에러 처리 부재
- **해결**: `getTeamInfo()` 메소드 개선 (dxManager.py:7783)
- **추가**: UTF-8 인코딩, 예외 처리, 로깅 기능
- **효과**: 코드 안정성 및 유지보수성 향상

### 실패/취소된 중복 코드 수정

#### 3. 리스트뷰 모델 설정 로직 ❌
- **위치**: 
  - 첫 번째: dxManager.py:5896-5909 (move_sideways 함수)
  - 두 번째: dxManager.py:6146-6165 (refereshListViews 함수)
  - 세 번째: dxManager.py:8835-8863 (reloadShotListView 함수)
- **문제**: 리스트뷰 모델 생성/설정 로직이 3곳에서 40-50라인 중복
- **시도한 해결책**: `setup_listview_model()` 통합 메소드 생성
- **실패 원인**: 
  - 매개변수 복잡성 (contain_dic, set_view, set_background_color)
  - 스케줄 리스트뷰와 샷 리스트뷰의 서로 다른 요구사항
  - 다양한 에러 발생 (KeyError, 함수 시그니처 불일치)
- **최종 결정**: **원래 중복 코드 상태로 복구**
- **교훈**: 복잡한 UI 로직은 통합보다는 개별 최적화가 적합할 수 있음

### 추가 에러 수정

#### taskColor None 에러 수정 ✅
- **위치**: dxManager.py:6670-6680 (set_listView_view 메소드)
- **문제**: `'NoneType' object has no attribute 'red'`
- **해결**: 안전한 None 체크 추가

#### sortColumn KeyError 수정 ✅  
- **위치**: dxManager.py:6101-6108 (refereshListViews 메소드)
- **문제**: `KeyError: 0` (정렬 정보 초기화 누락)
- **해결**: 기존 모델에서 정렬 정보 사전 수집

### 다음 작업 시 참고사항
1. **성공 패턴**: 단순하고 독립적인 로직은 통합 메소드로 효과적
2. **주의 패턴**: UI 관련 복잡한 로직은 개별 관리가 안전
3. **검증 방법**: 외부 시스템 테스트로 실제 동작 확인 필수